import telebot
from telebot import types
import json
import os
import threading
from flask import Flask

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask("")

@app.route("/")
def home():
    return "Bot is running"

def run():
    app.run(host="0.0.0.0", port=8000)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002703116591"))
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
SPONSORS_FILE = "sponsors.json"
JOIN_LINK_FILE = "join_link.txt"
POST_TEXT_FILE = "post_text.txt"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤
def load_sponsors():
    if not os.path.exists(SPONSORS_FILE):
        return []
    with open(SPONSORS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_sponsors(sponsors):
    with open(SPONSORS_FILE, "w", encoding="utf-8") as f:
        json.dump(sponsors, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É"
def load_join_link():
    if not os.path.exists(JOIN_LINK_FILE):
        return {"text": "üöÄ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É", "url": ""}
    with open(JOIN_LINK_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_join_link(data):
    with open(JOIN_LINK_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞
def load_post_text():
    if not os.path.exists(POST_TEXT_FILE):
        return ""
    with open(POST_TEXT_FILE, "r", encoding="utf-8") as f:
        return f.read()

def save_post_text(text):
    with open(POST_TEXT_FILE, "w", encoding="utf-8") as f:
        f.write(text)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏
def check_user_subscriptions(user_id, sponsors):
    for sponsor in sponsors:
        if sponsor.get("enabled", True):
            try:
                member = bot.get_chat_member(sponsor["channel_id"], user_id)
                if member.status in ["left", "kicked"]:
                    return False
            except Exception:
                return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è / —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def cmd_start(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç! –ö–µ—Ä—É–π—Ç–µ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    markup.row("–°–ø–æ–Ω—Å–æ—Ä–∏", "–ö–Ω–æ–ø–∫–∞ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É")
    markup.row("–ü–µ—Ä–µ–¥–æ–≥–ª—è–¥ –ø–æ—Å—Ç–∞", "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID)
def handle_admin_text(message):
    text = message.text.strip()

    if text == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞":
        msg = bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–∞ –∑ –µ–º–æ–¥–∑—ñ):")
        bot.register_next_step_handler(msg, save_new_post_text)

    elif text == "–°–ø–æ–Ω—Å–æ—Ä–∏":
        show_sponsors_menu(message)

    elif text == "–ö–Ω–æ–ø–∫–∞ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É":
        show_join_button_menu(message)

    elif text == "–ü–µ—Ä–µ–¥–æ–≥–ª—è–¥ –ø–æ—Å—Ç–∞":
        send_post_preview(message)

    elif text == "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç":
        publish_post(message)

    else:
        bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.")

def save_new_post_text(message):
    save_post_text(message.text)
    bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")
    show_main_menu(message)

# --- –ú–µ–Ω—é —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤ ---

def show_sponsors_menu(message):
    sponsors = load_sponsors()
    markup = types.InlineKeyboardMarkup()
    for i, sp in enumerate(sponsors):
        status = "‚úÖ" if sp.get("enabled", True) else "‚ùå"
        btn_text = f"{sp['name']} {status}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"sponsor_toggle_{i}"))
        markup.add(types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"sponsor_delete_{i}"))
    markup.add(types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ ‚ûï", callback_data="sponsor_add"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, "–°–ø–æ–Ω—Å–æ—Ä–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    data = call.data
    sponsors = load_sponsors()

    if data == "main_menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_main_menu(call.message)
        return

    if data == "sponsor_add":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É —Å–ø–æ–Ω—Å–æ—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞|https://–ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        bot.register_next_step_handler(msg, add_sponsor)
        bot.answer_callback_query(call.id)
        return

    if data.startswith("sponsor_toggle_"):
        idx = int(data.split("_")[-1])
        sponsors[idx]["enabled"] = not sponsors[idx].get("enabled", True)
        save_sponsors(sponsors)
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å —Å–ø–æ–Ω—Å–æ—Ä–∞ –∑–º—ñ–Ω–µ–Ω–æ.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_sponsors_menu(call.message)
        return

    if data.startswith("sponsor_delete_"):
        idx = int(data.split("_")[-1])
        sponsors.pop(idx)
        save_sponsors(sponsors)
        bot.answer_callback_query(call.id, "–°–ø–æ–Ω—Å–æ—Ä –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_sponsors_menu(call.message)
        return

    if data == "join_button_edit":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|https://–ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        bot.register_next_step_handler(msg, edit_join_button)
        bot.answer_callback_query(call.id)
        return

def add_sponsor(message):
    parts = message.text.split("|")
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    name = parts[0].strip()
    url = parts[1].strip()
    sponsors = load_sponsors()
    sponsors.append({"name": name, "url": url, "enabled": True, "channel_id": extract_channel_id(url)})
    save_sponsors(sponsors)
    bot.send_message(message.chat.id, f"–°–ø–æ–Ω—Å–æ—Ä '{name}' –¥–æ–¥–∞–Ω–∏–π.")
    show_sponsors_menu(message)

def extract_channel_id(url):
    if url.startswith("https://t.me/"):
        part = url.split("https://t.me/")[1]
        if part.startswith("+"):
            return None
        else:
            return part
    return None

def edit_join_button(message):
    parts = message.text.split("|")
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    text = parts[0].strip()
    url = parts[1].strip()
    save_join_link({"text": text, "url": url})
    bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∞ '–í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É' –æ–Ω–æ–≤–ª–µ–Ω–∞.")
    show_main_menu(message)

# --- –ü–µ—Ä–µ–¥–æ–≥–ª—è–¥ —ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç–∞ ---

def send_post_preview(message):
    post_text = load_post_text()
    sponsors = load_sponsors()
    join_button = load_join_link()

    keyboard = types.InlineKeyboardMarkup()
    for sp in sponsors:
        if sp.get("enabled", True):
            keyboard.add(types.InlineKeyboardButton(sp["name"], url=sp["url"]))
    if join_button.get("url"):
        keyboard.add(types.InlineKeyboardButton(join_button.get("text", "üöÄ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É"), url=join_button["url"]))

    bot.send_message(message.chat.id, post_text or "(–ü–æ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π)", reply_markup=keyboard, parse_mode="HTML")

def publish_post(message):
    post_text = load_post_text()
    sponsors = load_sponsors()
    join_button = load_join_link()

    keyboard = types.InlineKeyboardMarkup()
    for sp in sponsors:
        if sp.get("enabled", True):
            keyboard.add(types.InlineKeyboardButton(sp["name"], url=sp["url"]))
    if join_button.get("url"):
        keyboard.add(types.InlineKeyboardButton(join_button.get("text", "üöÄ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É"), url=join_button["url"]))

    try:
        bot.send_message(CHANNEL_ID, post_text or "(–ü–æ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π)", reply_markup=keyboard, parse_mode="HTML")
        bot.send_message(message.chat.id, "–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

# –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
threading.Thread(target=run).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()
